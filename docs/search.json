[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hitting for Six: A Visual Odyssey into the Heart of the Game",
    "section": "",
    "text": "1 Introduction\nIn the heartlands of our homeland, India, where passion courses through our veins like the sacred rivers, cricket is not just a game; it is a symphony of emotions, an opus played out on the fields and in our hearts. The echoes of joy and tears have reverberated through countless hours spent before the glowing television screen, where each delivery, each swing of the bat, has etched indelible memories in the tapestry of our lives.\nWe, the devotees of this divine sport, have danced on the hallowed pitches, feeling the rhythm of the game pulsate through our very beings. Cricket is not mere numbers to us; it is the lyrical verses of a poetic saga, the chapters of a spellbinding story that unfolds with every run, every wicket, every match.\nIn the realm of cricket, where strategy and skill converge, analytics reign supreme. It’s a realm where numbers aren’t just statistics but threads in the intricate fabric of the game. Our project is a journey, a voyage into the soul of cricket, where we unravel the threads of data to reveal the hidden stories and subtle nuances that make this sport a masterpiece.\nEmbarking on this odyssey, our aim is to present insights that resonate with the ardent followers of the game, weaving a narrative that is equally enticing for those stepping onto the field of cricket for the first time. Our visualizations, like strokes of a masterful brush, paint the canvas of cricket with trends, patterns, and stories waiting to be discovered.\nAs we delve into the realm of numbers, we seek to answer the profound questions that echo across the cricketing universe. The first echoes inquire into the evolution of the game, tracing the trend of average runs scored per match year by year since the inception of the One Day International cricket format. The second movement examines the symphony of batting averages and strike rates, orchestrating the variations of the top 20 run-scorers of the decade starting from 2010.\nThe grand crescendo arrives as we evaluate the epic tales spun in the One Day International World Cup finals from 2011 to 2023. Here, we observe the innings’ progression, dissect the distribution of runs scored by each batsman based on the bowlers, and scrutinize the economy rates of the maestros with the ball.\nAnd then, in the final movement, we turn our gaze to the individual portraits of the cricketing titans of the current decade. With analytical precision, we unveil the strengths and weaknesses of each player, providing a strategic compass for the teams that tread the fields today.\nThis project is not merely a collection of visualizations; it is a poetic exploration of cricket and beyond. It invites you to join us on a voyage, a journey through the numbers that form the backbone of this beautiful sport, uncovering the nuances that transform cricket from a game to a timeless tale. Welcome to the world where cricket meets art, where numbers dance in harmony, and where the journey is as enchanting as the destination."
  },
  {
    "objectID": "data.html#technical-description",
    "href": "data.html#technical-description",
    "title": "2  Data",
    "section": "2.1 Technical Description",
    "text": "2.1 Technical Description\n\n2.1.1 Data Sources and Methodology:\n1. ESPN Cricinfo Stats:\n\nData Collection: ESPN Cricinfo aggregates cricket statistics from various matches, including Test matches, ODIs, and T20Is. The platform is managed by a team of sports journalists and statisticians who curate and update the data regularly.\nData Format: The data is presented on the ESPN Cricinfo website in a user-friendly, tabular format, easily accessible for manual extraction. It includes player profiles, team records, match results, and other cricket-related metrics.\nFrequency of Updates: ESPN Cricinfo updates its statistics in near real-time during live matches and provides post-match updates regularly.\nIssues/Problems: While ESPN Cricinfo is a reputable source, occasional discrepancies or delays in updating certain statistics may occur. Users should be aware of these potential issues when interpreting the data.\n\n2. Cricsheet:\n\nData Collection: Cricsheet is a platform that collects and provides ball-by-ball data for cricket matches. The data is sourced from official scorecards, and the platform is maintained by a community of cricket enthusiasts and volunteers.\nData Format: Cricsheet offers downloadable datasets in structured, machine-readable formats (e.g., CSV). The data includes detailed information on individual deliveries, player actions, and match events.\nFrequency of Updates: Cricsheet updates its datasets regularly, covering a wide range of matches, both international and domestic.\nIssues/Problems: While Cricsheet data is comprehensive, occasional errors or missing information may be present. The reliance on volunteers for data input might introduce some level of inconsistency.\n\n\n\n2.1.2 Data Parsing and Analysis:\ncricketdata R Package:\n\nData Processing Tool: The “cricketdata” R package is chosen for its efficiency in parsing and processing cricket data from ESPN Cricinfo and Cricsheet.\nFunctionality: The package streamlines the extraction and transformation of data, converting it into a structured format suitable for analysis.\nCompatibility: The “cricketdata” package is designed to seamlessly integrate data from both ESPN Cricinfo and Cricsheet, ensuring a unified dataset for further analysis and visualization.\n\nIn conclusion, our cricket data visualization project leverages the comprehensive statistics from ESPN Cricinfo and the detailed ball-by-ball data from Cricsheet. The integration of these reputable sources is facilitated by the efficient parsing capabilities of the “cricketdata” R package. By acknowledging potential issues with data quality and using a robust analysis tool, we aim to provide insightful visualizations that enhance the understanding of player and team performance across various cricket formats."
  },
  {
    "objectID": "data.html#preprocessing-of-data",
    "href": "data.html#preprocessing-of-data",
    "title": "2  Data",
    "section": "2.2 Preprocessing of Data",
    "text": "2.2 Preprocessing of Data\n\n\nCode\ndf &lt;- read.csv(\"Data_Cricket_Data_by_season_all.csv\")\n\ndf$Country &lt;- sub(\".*\\\\((.*?)\\\\).*\", \"\\\\1\",df$Player)\ndf$Player &lt;- sub(\"\\\\(.*?\\\\)\", paste0(\"\"),df$Player)\n\ndf$NotOut &lt;- grepl(\"\\\\*\", df$HS)\n\n# Convert logical values to \"Yes\" and \"No\"\ndf$NotOut &lt;- ifelse(df$NotOut, \"Yes\", \"No\")\n\ndf$HS &lt;- gsub(\"\\\\*\", \"\", df$HS)\n\n# Assuming df is your dataframe and Season is the column with season values\ndf$start_year &lt;- (sub(\"/.*\", \"\", df$Season))  # Extract start year\n\n# For cases like \"yyyy/yy\" or \"yyyy/yy\", extract start and end years\nif (any(grepl(\"/\", df$Season))) {\n  df$start_year &lt;- (sub(\"/.*\", \"\", df$Season))\n  df$end_year &lt;- (paste0(substr(df$Season,1,2),\n                                   sub(\".*?/(\\\\d+)$\", \"\\\\1\", df$Season)))\n\n  } else {\n  # For single-value seasons, start and end years are the same\n  df$end_year &lt;- df$start_year\n}\n\ndf$end_year &lt;- gsub(\"1900\", \"2000\", df$end_year)\n\ndf$end_year[df$end_year %in% grep(\"^.{6}$\", df$end_year, value = TRUE)] &lt;- substr(df$end_year[df$end_year %in% grep(\"^.{6}$\", df$end_year, value = TRUE)], 3, 6)\n\n# Convert start_year and end_year to integer\n\ndf$Season &lt;- NULL\n\ndf &lt;- na.omit(df)\n\ndf[df==\"-\"] &lt;- NA\nnames(df)[15] &lt;- \"start\"\nnames(df)[16] &lt;- \"end\"\nnames(df)[5] &lt;- \"Runs\"\n\n\n\n\nCode\n####################### ICC 2011 Final ######################\n\n####### Preprocessing #######\nicc_2011 &lt;- read.csv(\"Data_ICC_2011_F.csv\")\nicc_2011$match_id &lt;- NULL\n\nicc_2011$wicket_type[icc_2011$wicket_type==\"\"] &lt;- NA\nicc_2011$player_dismissed[icc_2011$player_dismissed==\"\"] &lt;- NA\nicc_2011$over &lt;- floor(icc_2011$ball)\n\nover_intervals &lt;- cut(icc_2011$over, breaks=seq(0,50,10),\n                      include.lowest = TRUE,\n                      right = FALSE)\nicc_2011$binned_overs &lt;- over_intervals"
  },
  {
    "objectID": "data.html#research-plan",
    "href": "data.html#research-plan",
    "title": "2  Data",
    "section": "2.3 Research Plan",
    "text": "2.3 Research Plan\n1. Evolution of One Day International (ODI) Cricket:\nResearch Question: How has the trend of average runs scored per match evolved year by year since the inception of the ODI cricket format?\nData Utilization: ESPN Cricinfo Stats provides comprehensive statistics, including average runs scored per match. By leveraging this data source, we can trace the historical evolution of average runs scored in ODIs, identifying trends, peaks, and valleys over the years.\n2. Symphony of Batting Averages and Strike Rates:\nResearch Question: What are the variations in the batting averages and strike rates of the top 20 run-scorers of the decade starting from 2010?\nData Utilization: Both ESPN Cricinfo Stats and Cricsheet offer player-specific data, allowing us to compile and analyze the batting averages and strike rates of the top 20 run-scorers over the specified decade. This granular data enables a nuanced exploration of how individual performances have shaped the cricketing landscape.\n3. One Day International World Cup Finals Analysis:\nResearch Question: What tales are woven in the ODIs World Cup finals from 2011 to 2023?\nData Utilization: Cricsheet’s ball-by-ball data becomes instrumental here. By dissecting the distribution of runs scored by each batsman based on the bowlers, we can unravel the narratives within World Cup finals. Additionally, scrutinizing the economy rates of bowlers provides insights into the strategies employed during these high-stakes matches.\n4. Individual Portraits of Cricketing Titans:\nResearch Question: What are the strengths and weaknesses of individual cricketing titans in the current decade?\nData Utilization: Leveraging player-specific data from ESPN Cricinfo, we can delve into the strengths and weaknesses of cricketing titans. This involves analyzing batting averages, strike rates, bowling economy rates, and other relevant metrics, creating detailed portraits that serve as a strategic compass for teams."
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.4 Missing Value Analysis",
    "text": "2.4 Missing Value Analysis\n\n2.4.1 Analysis 1\n\n\nCode\nDataExplorer::plot_missing(df)\n\n\n\n\n\nInterpretation\nThis graph gives us an idea about the missing values in the dataset containing the seasonal performance of all the players that ever played the game. The missing values here simply denote the performance of players who have played too less for the statistics to even be generated. Many rows in this dataset correspond to bowlers, who do not get to score runs (often do not get to play), and hence they have very less records to generate summary statistics.\n\n\nCode\ngg_miss_upset(df)\n\n\n\n\n\nInterpretation\nThis is an Upset plot representing the missing values in the dataframe containing the seasonal performance of players. This kind of plot is very useful in understanding the interaction of missing values between columns. The Batting Average column contains over 2000 missing values, while the other columns 50s, 100s, Duck Outs and Strike Rates have just below 1000 missing values, whereas 805 missing values across the intersection of all these columns. The vertical bars denote the cardinality of the missing values based on each intersection of the columns. There are 1110 rows where only the Batting average values are missing, whereas . Rows where 100s, 50s 0s and Strike Rates have missing values, most likely correspond to players who have played very fey games, and their Batting averages have also not been generated. Hence, there is very strong interaction amongst the occurence of missing values across these values.\n\n\n2.4.2 Analysis 2\n\n\nCode\np1 &lt;- DataExplorer::plot_missing(icc_2011)\n\n\n\n\n\nCode\np2 &lt;- DataExplorer::plot_missing(icc_2015)\n\n\n\n\n\nCode\np3 &lt;- DataExplorer::plot_missing(icc_2019)\n\n\n\n\n\nCode\np4 &lt;- DataExplorer::plot_missing(icc_2023)\n\n\n\n\n\nInterpretation\nWe can observe from the plots above, that the pattern of percentage of missing values is similar, across the different world cup finals from 2011 to 2023.\nThis is because the missing values occur in columns such as player_dismissed, legbyes, noballs, wides etc. These events seldom occur throughout the game. The dismissal of a player can occur at most 20 times in an entire match, which corresponds to maximum 20 rows in our dataset.\nExtras are also fairly limited in a game since extras are a reflection of mistake made by a player.\n\n\n2.4.3 Analysis 3\n\n\nCode\nmissmap(icc_2011, main=\"Missing Data Map - 2011 ICC WC Finals\")\n\n\n\n\n\nCode\nmissmap(icc_2019, main=\"Missing Data Map - 2019 ICC WC Finals\")\n\n\n\n\n\nAdditional information we gain is that we get to know at what stages of the game the players were dismissed, or extras occurred, and we also get to know the proportion of total missing values."
  },
  {
    "objectID": "results.html#icc-2011-world-cup-mens-final",
    "href": "results.html#icc-2011-world-cup-mens-final",
    "title": "3  Results",
    "section": "3.1 ICC 2011 World Cup (Men’s) Final",
    "text": "3.1 ICC 2011 World Cup (Men’s) Final\n\n\nCode\nicc_2011 &lt;- read.csv(\"Data_ICC_2011_F.csv\")\nicc_2011$match_id &lt;- NULL\n\nicc_2011$wicket_type[icc_2011$wicket_type==\"\"] &lt;- NA\nicc_2011$player_dismissed[icc_2011$player_dismissed==\"\"] &lt;- NA\nicc_2011$over &lt;- floor(icc_2011$ball)\n\nover_intervals &lt;- cut(icc_2011$over, breaks=seq(0,50,10),\n                      include.lowest = TRUE,\n                      right = FALSE)\nicc_2011$binned_overs &lt;- over_intervals\n\ndf_2011_p1 &lt;- icc_2011 %&gt;%\n  group_by(binned_overs, innings) %&gt;%\n  summarize(runs = sum(runs_off_bat)+sum(extras),\n            n_wickets = sum(!is.na(wicket_type)))\n\n################ Plot Type 1 #####################\n\ndf_2011_p1 %&gt;%\n  pivot_longer(innings) %&gt;%\n  ggplot(aes(x=binned_overs, y=runs, fill=factor(value)))+\n  geom_col(position=\"dodge\")+\n  scale_x_discrete(breaks=c(\"[0,10)\", \"[10,20)\",\"[20,30)\", \"[30,40)\",\"[40,50]\"),\n                   labels=c(\"1-10\", \"11-20\", \"21-30\", \"31-40\", \"41-50\"))+\n  scale_y_continuous(breaks=seq(0,100,10))+\n  labs(title = \"\",\n       x = \"Overs\",\n       y = \"Runs Scores\",\n       fill = \"Innings\")+\n  geom_point(aes(y=runs),\n             position=position_dodge(width=0.85),\n             size=df_2011_p1$n_wickets*5, alpha=0.2)+\n  geom_text(vjust = 0, hjust = 0.64, label=df_2011_p1$n_wickets,\n            position = position_dodge(width = 0.80),\n            size=3)\n\n\n\n\n\nCode\n################ Plot Type 1 #####################\n\n################ Plot Type 2 #####################\n\ninning_2 &lt;- icc_2011[icc_2011$innings==2,]\n\ndf_2011_p2a &lt;- inning_2 %&gt;%\n  group_by(binned_overs, striker, bowler) %&gt;%\n  summarise(runs_scored=sum(runs_off_bat))\n\nggplot(df_2011_p2a, aes(y=bowler, x=runs_scored, fill=binned_overs))+\n  geom_col()+\n  facet_wrap(~striker)+\n  xlab(\"Runs Scored\")+\n  ylab(\"Bowler\")+\n  ggtitle(\"Runs scored by Indian Batsmen in front of Sri-Lankan Bowlers\")\n\n\n\n\n\nCode\n# Plot 2\ninning_1 &lt;- icc_2011[icc_2011$innings==1,]\n\ndf_2011_p2b &lt;- inning_1 %&gt;%\n  group_by(binned_overs, striker, bowler) %&gt;%\n  summarise(runs_scored=sum(runs_off_bat))\n\nggplot(df_2011_p2b, aes(y=bowler, x=runs_scored, fill=binned_overs))+\n  geom_col()+\n  facet_wrap(~striker)+\n  xlab(\"Runs Scored\")+\n  ylab(\"Bowler\")+\n  ggtitle(\"Runs scored by Sri-Lankan Batsmen in front of Indian Bowlers\")\n\n\n\n\n\nCode\n################ Plot Type 2 #####################"
  },
  {
    "objectID": "results.html#icc-2015-world-cup-mens-final",
    "href": "results.html#icc-2015-world-cup-mens-final",
    "title": "3  Results",
    "section": "3.2 ICC 2015 World Cup (Men’s) Final",
    "text": "3.2 ICC 2015 World Cup (Men’s) Final\n\n\nCode\nicc_2015 &lt;- read.csv(\"Data_ICC_2015_F.csv\")\nicc_2015$match_id &lt;- NULL\n\nicc_2015$wicket_type[icc_2015$wicket_type==\"\"] &lt;- NA\nicc_2015$player_dismissed[icc_2015$player_dismissed==\"\"] &lt;- NA\nicc_2015$over &lt;- floor(icc_2015$ball)\n\nover_intervals &lt;- cut(icc_2015$over, breaks=seq(0,50,10),\n                      include.lowest = TRUE,\n                      right = FALSE)\nicc_2015$binned_overs &lt;- over_intervals\n\ndf_2015_p1 &lt;- icc_2015 %&gt;%\n  group_by(binned_overs, innings) %&gt;%\n  summarize(runs = sum(runs_off_bat)+sum(extras),\n            n_wickets = sum(!is.na(wicket_type)))\n\ndf_2015_p1 %&gt;%\n  pivot_longer(innings) %&gt;%\n  ggplot(aes(x=binned_overs, y=runs, fill=factor(value)))+\n  geom_col(position=\"dodge\")+\n  scale_x_discrete(breaks=c(\"[0,10)\", \"[10,20)\",\"[20,30)\", \"[30,40)\",\"[40,50]\"),\n                   labels=c(\"1-10\", \"11-20\", \"21-30\", \"31-40\", \"41-50\"))+\n  scale_y_continuous(breaks=seq(0,100,10))+\n  labs(title = \"\",\n       x = \"Overs\",\n       y = \"Runs Scores\",\n       fill = \"Innings\")+\n  geom_point(aes(y=runs),\n             position=position_dodge(width=0.85),\n             size=df_2015_p1$n_wickets*5, alpha=0.2)+\n  geom_text(vjust = 0, hjust = 0.64, label=df_2015_p1$n_wickets,\n            position = position_dodge(width = 0.80),\n            size=3)\n\n\n\n\n\nCode\n################ Plot Type 1 #####################\n\n################ Plot Type 2 #####################\n\n# Plot 1\ninning_2 &lt;- icc_2015[icc_2015$innings==2,]\n\ndf_2015_p2a &lt;- inning_2 %&gt;%\n  group_by(binned_overs, striker, bowler) %&gt;%\n  summarise(runs_scored=sum(runs_off_bat))\n\nggplot(df_2015_p2a, aes(y=bowler, x=runs_scored, fill=binned_overs))+\n  geom_col()+\n  facet_wrap(~striker)+\n  xlab(\"Runs Scored\")+\n  ylab(\"Bowler\")+\n  ggtitle(\"Runs scored by Australian Batsmen in front of New Zealand Bowlers\")\n\n\n\n\n\nCode\n# Plot 2\ninning_1 &lt;- icc_2015[icc_2015$innings==1,]\n\ndf_2015_p2b &lt;- inning_1 %&gt;%\n  group_by(binned_overs, striker, bowler) %&gt;%\n  summarise(runs_scored=sum(runs_off_bat))\n\nggplot(df_2015_p2b, aes(y=bowler, x=runs_scored, fill=binned_overs))+\n  geom_col()+\n  facet_wrap(~striker)+\n  xlab(\"Runs Scored\")+\n  ylab(\"Bowler\")+\n  ggtitle(\"Runs scored by New Zealand Batsmen in front of Australian Bowlers\")\n\n\n\n\n\nCode\n################ Plot Type 2 #####################\n####################### ICC 2015 Final ######################"
  },
  {
    "objectID": "results.html#icc-2019-world-cup-mens-final",
    "href": "results.html#icc-2019-world-cup-mens-final",
    "title": "3  Results",
    "section": "3.3 ICC 2019 World Cup (Men’s) Final",
    "text": "3.3 ICC 2019 World Cup (Men’s) Final\n\n\nCode\n####################### ICC 2019 Final ######################\n####### Preprocessing #######\nicc_2019 &lt;- read.csv(\"Data_ICC_2019_F.csv\")\nicc_2019$match_id &lt;- NULL\n\nicc_2019$wicket_type[icc_2019$wicket_type==\"\"] &lt;- NA\nicc_2019$player_dismissed[icc_2019$player_dismissed==\"\"] &lt;- NA\nicc_2019$over &lt;- floor(icc_2019$ball)\n\nover_intervals &lt;- cut(icc_2019$over, breaks=seq(0,50,10),\n                      include.lowest = TRUE,\n                      right = FALSE)\nicc_2019$binned_overs &lt;- over_intervals\n####### Preprocessing #######\n\n# Comment: These missing values don't indicate lack of data but are logical in nature\n\n################ Plot Type 1 #####################\ndf_2019_p1 &lt;- icc_2019 %&gt;%\n  group_by(binned_overs, innings) %&gt;%\n  summarize(runs = sum(runs_off_bat)+sum(extras),\n            n_wickets = sum(!is.na(wicket_type)))\n\ndf_2019_p1 %&gt;%\n  pivot_longer(innings) %&gt;%\n  ggplot(aes(x=binned_overs, y=runs, fill=factor(value)))+\n  geom_col(position=\"dodge\")+\n  scale_x_discrete(breaks=c(\"[0,10)\", \"[10,20)\",\"[20,30)\", \"[30,40)\",\"[40,50]\"),\n                   labels=c(\"1-10\", \"11-20\", \"21-30\", \"31-40\", \"41-50\"))+\n  scale_y_continuous(breaks=seq(0,100,10))+\n  labs(title = \"\",\n       x = \"Overs\",\n       y = \"Runs Scores\",\n       fill = \"Innings\")+\n  geom_point(aes(y=runs),\n             position=position_dodge(width=0.85),\n             size=df_2019_p1$n_wickets*5, alpha=0.2)+\n  geom_text(vjust = 0, hjust = 0.64, label=df_2019_p1$n_wickets,\n            position = position_dodge(width = 0.80),\n            size=3)\n\n\n\n\n\nCode\n################ Plot Type 1 #####################\n\n\n\n################ Plot Type 2 #####################\n\n# Plot 1\ninning_2 &lt;- icc_2019[icc_2019$innings==2,]\n\ndf_2019_p2a &lt;- inning_2 %&gt;%\n  group_by(binned_overs, striker, bowler) %&gt;%\n  summarise(runs_scored=sum(runs_off_bat))\n\nggplot(df_2019_p2a, aes(y=bowler, x=runs_scored, fill=binned_overs))+\n  geom_col()+\n  facet_wrap(~striker)+\n  xlab(\"Runs Scored\")+\n  ylab(\"Bowler\")+\n  ggtitle(\"Runs scored by New Zealand Batsmen in front of England Bowlers\")\n\n\n\n\n\nCode\n# Plot 2\ninning_1 &lt;- icc_2019[icc_2019$innings==1,]\n\ndf_2019_p2b &lt;- inning_1 %&gt;%\n  group_by(binned_overs, striker, bowler) %&gt;%\n  summarise(runs_scored=sum(runs_off_bat))\n\nggplot(df_2019_p2b, aes(y=bowler, x=runs_scored, fill=binned_overs))+\n  geom_col()+\n  facet_wrap(~striker)+\n  xlab(\"Runs Scored\")+\n  ylab(\"Bowler\")+\n  ggtitle(\"Runs scored by England Batsmen in front of New Zealand Bowlers\")\n\n\n\n\n\nCode\n################ Plot Type 2 #####################\n####################### ICC 2019 Final ######################"
  },
  {
    "objectID": "results.html#icc-2023-world-cup-mens-final",
    "href": "results.html#icc-2023-world-cup-mens-final",
    "title": "3  Results",
    "section": "3.4 ICC 2023 World Cup (Men’s) Final",
    "text": "3.4 ICC 2023 World Cup (Men’s) Final\n\n\nCode\n####################### ICC 2023 Final ######################\n####### Preprocessing #######\nicc_2023 &lt;- read.csv(\"Data_ICC_2023_F.csv\")\nicc_2023$match_id &lt;- NULL\n\nicc_2023$wicket_type[icc_2023$wicket_type==\"\"] &lt;- NA\nicc_2023$player_dismissed[icc_2023$player_dismissed==\"\"] &lt;- NA\nicc_2023$over &lt;- floor(icc_2023$ball)\n\nover_intervals &lt;- cut(icc_2023$over, breaks=seq(0,50,10),\n                      include.lowest = TRUE,\n                      right = FALSE)\nicc_2023$binned_overs &lt;- over_intervals\n####### Preprocessing #######\n\n################ Plot Type 1 #####################\ndf_2023_p1 &lt;- icc_2023 %&gt;%\n  group_by(binned_overs, innings) %&gt;%\n  summarize(runs = sum(runs_off_bat)+sum(extras),\n            n_wickets = sum(!is.na(wicket_type)))\n\ndf_2023_p1 %&gt;%\n  pivot_longer(innings) %&gt;%\n  ggplot(aes(x=binned_overs, y=runs, fill=factor(value)))+\n  geom_col(position=\"dodge\")+\n  scale_x_discrete(breaks=c(\"[0,10)\", \"[10,20)\",\"[20,30)\", \"[30,40)\",\"[40,50]\"),\n                   labels=c(\"1-10\", \"11-20\", \"21-30\", \"31-40\", \"41-50\"))+\n  scale_y_continuous(breaks=seq(0,100,10))+\n  labs(title = \"\",\n       x = \"Overs\",\n       y = \"Runs Scores\",\n       fill = \"Innings\")+\n  geom_point(aes(y=runs),\n             position=position_dodge(width=0.85),\n             size=df_2023_p1$n_wickets*5, alpha=0.2)+\n  geom_text(vjust = 0, hjust = 0.64, label=df_2023_p1$n_wickets,\n            position = position_dodge(width = 0.80),\n            size=3)\n\n\n\n\n\nCode\n################ Plot Type 1 #####################\n\n\n\n################ Plot Type 2 #####################\n\n# Plot 1\ninning_2 &lt;- icc_2023[icc_2023$innings==2,]\n\ndf_2023_p2a &lt;- inning_2 %&gt;%\n  group_by(binned_overs, striker, bowler) %&gt;%\n  summarise(runs_scored=sum(runs_off_bat))\n\nggplot(df_2023_p2a, aes(y=bowler, x=runs_scored, fill=binned_overs))+\n  geom_col()+\n  facet_wrap(~striker)+\n  xlab(\"Runs Scored\")+\n  ylab(\"Bowler\")+\n  ggtitle(\"Runs scored by Australian Batsmen in front of Indian Bowlers\")\n\n\n\n\n\nCode\n# Plot 2\ninning_1 &lt;- icc_2023[icc_2023$innings==1,]\n\ndf_2023_p2b &lt;- inning_1 %&gt;%\n  group_by(binned_overs, striker, bowler) %&gt;%\n  summarise(runs_scored=sum(runs_off_bat))\n\nggplot(df_2023_p2b, aes(y=bowler, x=runs_scored, fill=binned_overs))+\n  geom_col()+\n  facet_wrap(~striker)+\n  xlab(\"Runs Scored\")+\n  ylab(\"Bowler\")+\n  ggtitle(\"Runs scored by Indian Batsmen in front of Australian Bowlers\")\n\n\n\n\n\nCode\n################ Plot Type 2 #####################\n####################### ICC 2023 Final ######################"
  },
  {
    "objectID": "d3graph.html",
    "href": "d3graph.html",
    "title": "4  Interactive graph",
    "section": "",
    "text": "Batsmen Dismissal Analysis: Percentage Breakdown by Dismissal Type\n\n\nChoose a player from the dropdown menu adjacent to the plot\n\n\n\n\n\n\nIn the realm of cricket, the analysis of a batsman’s dismissals is crucial for opposing teams, providing insights into their strengths and weaknesses. A strategic game plan to dismiss batsmen efficiently contributes significantly to gaining control over a match. Our interactive chart delves into the dismissal types of the world’s top 10 run-scorers, offering a visual breakdown to answer the question: “What are the strengths and weaknesses of individual cricketing titans?”\nBefore delving into the chart’s analysis, it’s essential to understand the significance of each dismissal category:\n\nBowled: Occurs when a batsman’s wicket is fairly broken by a bowler-delivered ball.\nCaught: Involves a batsman being out when a delivered ball hits the bat and is subsequently held by a fielder without touching the ground.\nCaught Behind: A specific case of being caught out, taken by the wicketkeeper or slip fielders.\nLeg Before Wicket (LBW): Involves a batsman being out if a fair ball hits any part of the body (except the hand) without first touching the bat, with a trajectory indicating it would hit the wickets.\nStumped: Occurs when a batsman, facing a fair delivery, steps out of the crease, and the wicket is broken by the wicketkeeper, often happening against spin bowlers.\nRun Out: A batsman is declared run out if they fail to get their bat past the crease before it is broken while running between the wickets.\nOthers: Encompasses dismissal types like hit-wicket or out due to obstruction.\n\nNow, understanding the relationship between each dismissal type and a batsman’s weaknesses:\n\nBowled: Indicates difficulty in covering the line of the ball or flaws in footwork, potentially related to adapting to varying pitch conditions.\nCaught: Suggests issues with shot timing or selection, reflecting an aggressive playing style or situational constraints.\nCaught Behind: Indicates trouble facing deliveries that seam and swing outward, with vulnerabilities in playing away from the body.\nLBW: Suggests challenges in covering the line of the ball and problems facing deliveries that seam and swing inward, possibly coupled with a tendency to play across the line.\nStumped: Indicates a tendency to step out to spinners, exploitable by opposition teams through flighted deliveries.\nRun Out: Reflects poor running between the wickets, exploitable by preventing boundaries and encouraging singles and doubles.\n\nDirect inferences from the plots reveal that “Caught Out” is the most common dismissal type, attributed to the aggressive nature of modern cricket. Rare dismissals like hit-wicket or obstruction form a minimal proportion in the game.\nUsing the visualization\nThe pie chart above provides a visual representation of dismissal types for each batsman, facilitating a detailed comparison. One may select the player from the dropdown menu and hover the mouse on the chart to get the proportion and the actual values of the dismissal.\n\nComparing the Cricketing Greats Rahul Dravid and Virat Kohli\n\n\n\n\n\n\nRahul Dravid\nVirat Kohli\n\n\n\n\nAfter “Caught Out,” the highest proportion is “Bowled,” indicating potential issues in covering the line of the ball or foot movement.\nAfter “Caught Out,” the highest proportion is “Caught Behind,” revealing difficulties in playing deliveries on the 4th and 5th stump and a tendency to play away from the body.\n\n\n“Run Out” follows, suggesting challenges in running between the wickets.\n“Bowled” follows, suggesting challenges against swinging or spinning inward deliveries.\n\n\nThe lowest proportion is “Stumped,” indicating Dravid’s proficiency against spin.\nNotably, Kohli has a considerably lower proportion of “Run Out,” indicating his proficiency between the wickets.\n\n\n\nSimilar insights can be gleaned for other players by selecting them from the dropdown menu."
  }
]