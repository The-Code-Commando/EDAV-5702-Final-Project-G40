[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hitting for Six: A Visual Odyssey into the Heart of the Game",
    "section": "",
    "text": "1 Introduction"
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "2.1 Description",
    "text": "2.1 Description"
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\n\n\nCode\nlibrary(redav)\n####################Plot2######################\nplot_missing(df)\n\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\nCode\n####################Plot2######################"
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Problem Set 3 Fall 2023",
    "section": "",
    "text": "3 Data\nCode\n# Load the mtcars dataset\ndata(mtcars)\n\n# Create a scatter plot of mpg (miles per gallon) vs. wt (weight)\nplot(mtcars$wt, mtcars$mpg, \n     main = \"Scatter Plot of MPG vs. Weight\",\n     xlab = \"Weight\",\n     ylab = \"Miles per Gallon\",\n     pch = 16,   # Set the point character to a solid circle\n     col = \"blue\"  # Set the point color to blue\n)"
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "Code\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(parcoords)\nlibrary(d3r)\nlibrary(GGally)\n\n\n\n\nCode\ndf &lt;- read.csv(\"Cricket_Data_by_season.csv\")\n\ndf$Country &lt;- sub(\".*\\\\((.*?)\\\\).*\", \"\\\\1\",df$Player)\ndf$Player &lt;- sub(\"\\\\(.*?\\\\)\", paste0(\"\"),df$Player)\n\ndf$NotOut &lt;- grepl(\"\\\\*\", df$HS)\n\n# Convert logical values to \"Yes\" and \"No\"\ndf$NotOut &lt;- ifelse(df$NotOut, \"Yes\", \"No\")\n\ndf$HS &lt;- gsub(\"\\\\*\", \"\", df$HS)\n\n# Assuming df is your dataframe and Season is the column with season values\ndf$start_year &lt;- (sub(\"/.*\", \"\", df$Season))  # Extract start year\n\n# For cases like \"yyyy/yy\" or \"yyyy/yy\", extract start and end years\nif (any(grepl(\"/\", df$Season))) {\n  df$start_year &lt;- (sub(\"/.*\", \"\", df$Season))\n  df$end_year &lt;- (paste0(substr(df$Season,1,2),\n                                   sub(\".*?/(\\\\d+)$\", \"\\\\1\", df$Season)))\n\n  } else {\n  # For single-value seasons, start and end years are the same\n  df$end_year &lt;- df$start_year\n}\n\ndf$end_year &lt;- gsub(\"1900\", \"2000\", df$end_year)\n\ndf$end_year[df$end_year %in% grep(\"^.{6}$\", df$end_year, value = TRUE)] &lt;- substr(df$end_year[df$end_year %in% grep(\"^.{6}$\", df$end_year, value = TRUE)], 3, 6)\n\n# Convert start_year and end_year to integer\n\ndf$Season &lt;- NULL\n\ndf &lt;- na.omit(df)\n\ndf[] &lt;- lapply(df, function(x) gsub(\"-\", \"0\", x))\n\ndf_Ind &lt;- df[df$Country==\"IND\" | df$Country==\"ICC/IND\",]\n\n\n\ndf1 &lt;- df_Ind %&gt;%\n  group_by(start_year) %&gt;%\n  summarise(total_runs = sum(as.numeric(RunsDescending)))\n\nodi_stats_ind &lt;- read.csv(\"India_ODI_stats.csv\")\n\ndf1$ave_runs &lt;- df1$total_runs/odi_stats_ind$PLD\n\n\n\n\nCode\n###################Plot 1##################################\nggplot(df1, aes(x=as.numeric(start_year), y=ave_runs))+\n  geom_line()+\n  geom_point()+\n  labs(x=\"Year\", y=\"Average Runs (by Matches Played)\")+\n  scale_x_continuous(breaks=seq(1970,2025,2))\n\n\n\n\n\nCode\n###################Plot 1##################################\n\n\n\n\nCode\nnames(df)[15] &lt;- \"start\"\nnames(df)[16] &lt;- \"end\"\nnames(df)[5] &lt;- \"Runs\"\n\ndecade &lt;- cut(as.numeric(df$start),\n              breaks = seq(1970,2030,by=10),\n              dig.lab = 4,\n              include.lowest = TRUE,\n              right=FALSE)\n\ndf$Decade &lt;- decade\n\nfiltered_10_20 &lt;- df %&gt;%\n  filter(Decade == \"[2010,2020)\") %&gt;%\n  group_by(Player, Country) %&gt;%\n  summarise(Runs = sum(as.numeric(Runs)), decade_avg_str = mean(as.numeric(SR)),\n            decade_avg_ba = mean(as.numeric(Ave)))\n\nfiltered_10_20 &lt;- filtered_10_20[order(filtered_10_20$Runs,\n                                       decreasing = TRUE),]\n\n\n\n\nCode\n## Add ggplotly later on!\n\nggparcoord(filtered_10_20[1:20,],\n                  columns=c(3:5),\n                  groupColumn = 1, showPoints = TRUE)"
  }
]