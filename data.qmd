---
execute:
  echo: true
format:
  html:
    fig-width: 11
    fig-height: 7
    out-width: 60%
    embed-resources: true
---

```{r setup, include=FALSE} 
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

```{r Libraries}

library(ggplot2)
library(plotly)
library(tidyverse)
library(dplyr)
library(parcoords)
library(d3r)
library(GGally)
library(forcats)
library(redav)
library(DataExplorer)
library(Amelia)
library(naniar)
library(gridExtra)

```

# Data

## Technical Description

### Data Sources and Methodology:

**1. ESPN Cricinfo Stats:**

   + Data Collection: ESPN Cricinfo aggregates cricket statistics from various matches, including Test matches, ODIs, and T20Is. The platform is managed by a team of sports journalists and statisticians who curate and update the data regularly.
   
   + Data Format: The data is presented on the ESPN Cricinfo website in a user-friendly, tabular format, easily accessible for manual extraction. It includes player profiles, team records, match results, and other cricket-related metrics.
   
   + Frequency of Updates: ESPN Cricinfo updates its statistics in near real-time during live matches and provides post-match updates regularly.
   
   + Issues/Problems: While ESPN Cricinfo is a reputable source, occasional discrepancies or delays in updating certain statistics may occur. Users should be aware of these potential issues when interpreting the data.

**2. Cricsheet:**

   + Data Collection: Cricsheet is a platform that collects and provides ball-by-ball data for cricket matches. The data is sourced from official scorecards, and the platform is maintained by a community of cricket enthusiasts and volunteers.
   
   + Data Format: Cricsheet offers downloadable datasets in structured, machine-readable formats (e.g., CSV). The data includes detailed information on individual deliveries, player actions, and match events.
   
   + Frequency of Updates: Cricsheet updates its datasets regularly, covering a wide range of matches, both international and domestic.
   
   + Issues/Problems: While Cricsheet data is comprehensive, occasional errors or missing information may be present. The reliance on volunteers for data input might introduce some level of inconsistency.

### Data Parsing and Analysis:

**cricketdata R Package:**

  + Data Processing Tool: The "cricketdata" R package is chosen for its efficiency in parsing and processing cricket data from ESPN Cricinfo and Cricsheet.
  
  + Functionality: The package streamlines the extraction and transformation of data, converting it into a structured format suitable for analysis.
  
  + Compatibility: The "cricketdata" package is designed to seamlessly integrate data from both ESPN Cricinfo and Cricsheet, ensuring a unified dataset for further analysis and visualization.

*In conclusion, our cricket data visualization project leverages the comprehensive statistics from ESPN Cricinfo and the detailed ball-by-ball data from Cricsheet. The integration of these reputable sources is facilitated by the efficient parsing capabilities of the "cricketdata" R package. By acknowledging potential issues with data quality and using a robust analysis tool, we aim to provide insightful visualizations that enhance the understanding of player and team performance across various cricket formats.*

## Preprocessing of Data

```{r preprocessing}

df <- read.csv("Data_Cricket_Data_by_season_all.csv")

df$Country <- sub(".*\\((.*?)\\).*", "\\1",df$Player)
df$Player <- sub("\\(.*?\\)", paste0(""),df$Player)

df$NotOut <- grepl("\\*", df$HS)

# Convert logical values to "Yes" and "No"
df$NotOut <- ifelse(df$NotOut, "Yes", "No")

df$HS <- gsub("\\*", "", df$HS)

# Assuming df is your dataframe and Season is the column with season values
df$start_year <- (sub("/.*", "", df$Season))  # Extract start year

# For cases like "yyyy/yy" or "yyyy/yy", extract start and end years
if (any(grepl("/", df$Season))) {
  df$start_year <- (sub("/.*", "", df$Season))
  df$end_year <- (paste0(substr(df$Season,1,2),
                                   sub(".*?/(\\d+)$", "\\1", df$Season)))

  } else {
  # For single-value seasons, start and end years are the same
  df$end_year <- df$start_year
}

df$end_year <- gsub("1900", "2000", df$end_year)

df$end_year[df$end_year %in% grep("^.{6}$", df$end_year, value = TRUE)] <- substr(df$end_year[df$end_year %in% grep("^.{6}$", df$end_year, value = TRUE)], 3, 6)

# Convert start_year and end_year to integer

df$Season <- NULL

df <- na.omit(df)

df[df=="-"] <- NA
names(df)[15] <- "start"
names(df)[16] <- "end"
names(df)[5] <- "Runs"


```


```{r 2011}

####################### ICC 2011 Final ######################

####### Preprocessing #######
icc_2011 <- read.csv("Data_ICC_2011_F.csv")
icc_2011$match_id <- NULL

icc_2011$wicket_type[icc_2011$wicket_type==""] <- NA
icc_2011$player_dismissed[icc_2011$player_dismissed==""] <- NA
icc_2011$over <- floor(icc_2011$ball)

over_intervals <- cut(icc_2011$over, breaks=seq(0,50,10),
                      include.lowest = TRUE,
                      right = FALSE)
icc_2011$binned_overs <- over_intervals

```

```{r 2015, include=FALSE}

icc_2015 <- read.csv("Data_ICC_2015_F.csv")
icc_2015$match_id <- NULL

icc_2015$wicket_type[icc_2015$wicket_type==""] <- NA
icc_2015$player_dismissed[icc_2015$player_dismissed==""] <- NA
icc_2015$over <- floor(icc_2015$ball)

over_intervals <- cut(icc_2015$over, breaks=seq(0,50,10),
                      include.lowest = TRUE,
                      right = FALSE)
icc_2015$binned_overs <- over_intervals


```

```{r 2019, include=FALSE}


icc_2019 <- read.csv("Data_ICC_2019_F.csv")
icc_2019$match_id <- NULL

icc_2019$wicket_type[icc_2019$wicket_type==""] <- NA
icc_2019$player_dismissed[icc_2019$player_dismissed==""] <- NA
icc_2019$over <- floor(icc_2019$ball)

over_intervals <- cut(icc_2019$over, breaks=seq(0,50,10),
                      include.lowest = TRUE,
                      right = FALSE)
icc_2019$binned_overs <- over_intervals

```

```{r 2023, include=FALSE}


icc_2023 <- read.csv("Data_ICC_2023_F.csv")
icc_2023$match_id <- NULL

icc_2023$wicket_type[icc_2023$wicket_type==""] <- NA
icc_2023$player_dismissed[icc_2023$player_dismissed==""] <- NA
icc_2023$over <- floor(icc_2023$ball)

over_intervals <- cut(icc_2023$over, breaks=seq(0,50,10),
                      include.lowest = TRUE,
                      right = FALSE)
icc_2023$binned_overs <- over_intervals

```

## Research Plan


**1. Evolution of One Day International (ODI) Cricket:**

Research Question: *How has the trend of average runs scored per match evolved year by year since the inception of the ODI cricket format?*

Data Utilization: ESPN Cricinfo Stats provides comprehensive statistics, including average runs scored per match. By leveraging this data source, we can trace the historical evolution of average runs scored in ODIs, identifying trends, peaks, and valleys over the years.

**2. Symphony of Batting Averages and Strike Rates:**

Research Question: *What are the variations in the batting averages and strike rates of the top 20 run-scorers of the decade starting from 2010?*

Data Utilization: Both ESPN Cricinfo Stats and Cricsheet offer player-specific data, allowing us to compile and analyze the batting averages and strike rates of the top 20 run-scorers over the specified decade. This granular data enables a nuanced exploration of how individual performances have shaped the cricketing landscape.

**3. One Day International World Cup Finals Analysis:**

Research Question: *What tales are woven in the ODIs World Cup finals from 2011 to 2023?*

Data Utilization: Cricsheet's ball-by-ball data becomes instrumental here. By dissecting the distribution of runs scored by each batsman based on the bowlers, we can unravel the narratives within World Cup finals. Additionally, scrutinizing the economy rates of bowlers provides insights into the strategies employed during these high-stakes matches.

**4. Individual Portraits of Cricketing Titans:**

Research Question: *What are the strengths and weaknesses of individual cricketing titans in the current decade?*

Data Utilization: Leveraging player-specific data from ESPN Cricinfo, we can delve into the strengths and weaknesses of cricketing titans. This involves analyzing batting averages, strike rates, bowling economy rates, and other relevant metrics, creating detailed portraits that serve as a strategic compass for teams.



## Missing Value Analysis

```{r missing DataExplorer}
DataExplorer::plot_missing(df)

```

### Analysis 1 

```{r missing naniar}

gg_miss_upset(df)

```

**Interpretation**

This graph gives us an idea about the missing values in the dataset containing the seasonal performance of all the players that ever played the game. The missing values here simply denote the performance of players who have played too less for the statistics to even be generated. Many rows in this dataset correspond to [bowlers](https://en.wikipedia.org/wiki/Bowling_(cricket)), who do not get to score runs (often do not get to play), and hence they have very less records to generate summary statistics.

### Analysis 2 

```{r missing WC Data Count Data Explorer}

p1 <- DataExplorer::plot_missing(icc_2011)
p2 <- DataExplorer::plot_missing(icc_2015)
p3 <- DataExplorer::plot_missing(icc_2019)
p4 <- DataExplorer::plot_missing(icc_2023)


```

**Interpretation**

This is an *Upset* plot representing the missing values in the dataframe containing the seasonal performance of players. This kind of plot is very useful in understanding the interaction of missing values between columns. The [Batting Average](https://en.wikipedia.org/wiki/Batting_average_(cricket)) column contains over 2000 missing values, while the other columns [50s, 100s](https://en.wikipedia.org/wiki/Century_(cricket)), [Duck Outs](https://en.wikipedia.org/wiki/Duck_(cricket)) and [Strike Rates](https://en.wikipedia.org/wiki/Strike_rate) have just below 1000 missing values, whereas 805 missing values across the intersection of all these columns. The vertical bars denote the cardinality of the missing values based on each intersection of the columns. There are 1110 rows where only the Batting average values are missing, whereas . Rows where 100s, 50s 0s and Strike Rates have missing values, most likely correspond to players who have played very fey games, and their Batting averages have also not been generated. Hence, there is very strong interaction amongst the occurence of missing values across these values.

### Analysis 3

```{r missing WC Map Amelia}

missmap(icc_2011, main="Missing Data Map - 2011 ICC WC Finals")

missmap(icc_2019, main="Missing Data Map - 2019 ICC WC Finals")

```

**Interpretation**

We can observe from the plots above, that the pattern of percentage of missing values is similar, across the different world cup finals from 2011 to 2023. 

This is because the missing values occur in columns such as `player_dismissed`, `legbyes`, `noballs`, `wides` etc. These events seldom occur throughout the game. The [dismissal](https://en.wikipedia.org/wiki/Dismissal_(cricket)) of a player can occur at most 20 times in an entire match, which corresponds to maximum 20 rows in our dataset. 

[Extras](https://en.wikipedia.org/wiki/Extra_(cricket)) are also fairly limited in a game since extras are a reflection of mistake made by a player.

From the second plot, the additional information we gain is that we get to know at what stages of the game the players were dismissed, or extras occurred, and we also get to know the proportion of total missing values.
