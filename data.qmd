---
execute:
  echo: true
format:
  html:
    fig-width: 11
    fig-height: 7
    out-width: 60%
    embed-resources: true
---

```{r setup, include=FALSE} 
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

```{r Libraries}

library(ggplot2)
library(plotly)
library(tidyverse)
library(dplyr)
library(parcoords)
library(d3r)
library(GGally)
library(forcats)
library(redav)

```

# Data

## Data Sources and Methodology:

1. ESPN Cricinfo Stats:
   - Data Collection: ESPN Cricinfo aggregates cricket statistics from various matches, including Test matches, ODIs, and T20Is. The platform is managed by a team of sports journalists and statisticians who curate and update the data regularly.
   - Data Format: The data is presented on the ESPN Cricinfo website in a user-friendly, tabular format, easily accessible for manual extraction. It includes player profiles, team records, match results, and other cricket-related metrics.
   - Frequency of Updates: ESPN Cricinfo updates its statistics in near real-time during live matches and provides post-match updates regularly.
   - Issues/Problems: While ESPN Cricinfo is a reputable source, occasional discrepancies or delays in updating certain statistics may occur. Users should be aware of these potential issues when interpreting the data.

2. Cricsheet:
   - Data Collection: Cricsheet is a platform that collects and provides ball-by-ball data for cricket matches. The data is sourced from official scorecards, and the platform is maintained by a community of cricket enthusiasts and volunteers.
   - Data Format: Cricsheet offers downloadable datasets in structured, machine-readable formats (e.g., CSV). The data includes detailed information on individual deliveries, player actions, and match events.
   - Frequency of Updates: Cricsheet updates its datasets regularly, covering a wide range of matches, both international and domestic.
   - Issues/Problems: While Cricsheet data is comprehensive, occasional errors or missing information may be present. The reliance on volunteers for data input might introduce some level of inconsistency.

## Data Parsing and Analysis:

- cricketdata R Package:
  - Data Processing Tool: The "cricketdata" R package is chosen for its efficiency in parsing and processing cricket data from ESPN Cricinfo and Cricsheet.
  - Functionality: The package streamlines the extraction and transformation of data, converting it into a structured format suitable for analysis.
  - Compatibility: The "cricketdata" package is designed to seamlessly integrate data from both ESPN Cricinfo and Cricsheet, ensuring a unified dataset for further analysis and visualization.

## Conclusion:

In conclusion, our cricket data visualization project leverages the comprehensive statistics from ESPN Cricinfo and the detailed ball-by-ball data from Cricsheet. The integration of these reputable sources is facilitated by the efficient parsing capabilities of the "cricketdata" R package. By acknowledging potential issues with data quality and using a robust analysis tool, we aim to provide insightful visualizations that enhance the understanding of player and team performance across various cricket formats.

## Preprocessing of Data

```{r}

df <- read.csv("Data_Cricket_Data_by_season_all.csv")

df$Country <- sub(".*\\((.*?)\\).*", "\\1",df$Player)
df$Player <- sub("\\(.*?\\)", paste0(""),df$Player)

df$NotOut <- grepl("\\*", df$HS)

# Convert logical values to "Yes" and "No"
df$NotOut <- ifelse(df$NotOut, "Yes", "No")

df$HS <- gsub("\\*", "", df$HS)

# Assuming df is your dataframe and Season is the column with season values
df$start_year <- (sub("/.*", "", df$Season))  # Extract start year

# For cases like "yyyy/yy" or "yyyy/yy", extract start and end years
if (any(grepl("/", df$Season))) {
  df$start_year <- (sub("/.*", "", df$Season))
  df$end_year <- (paste0(substr(df$Season,1,2),
                                   sub(".*?/(\\d+)$", "\\1", df$Season)))

  } else {
  # For single-value seasons, start and end years are the same
  df$end_year <- df$start_year
}

df$end_year <- gsub("1900", "2000", df$end_year)

df$end_year[df$end_year %in% grep("^.{6}$", df$end_year, value = TRUE)] <- substr(df$end_year[df$end_year %in% grep("^.{6}$", df$end_year, value = TRUE)], 3, 6)

# Convert start_year and end_year to integer

df$Season <- NULL

df <- na.omit(df)

df[df=="-"] <- NA
names(df)[15] <- "start"
names(df)[16] <- "end"
names(df)[5] <- "Runs"


```

## Description

## Missing value analysis

```{r}

library(redav)
####################Plot2######################
plot_missing(df)
####################Plot2######################

```

```{r}

####################### ICC 2011 Final ######################

####### Preprocessing #######
icc_2011 <- read.csv("Data_ICC_2011_F.csv")
icc_2011$match_id <- NULL

icc_2011$wicket_type[icc_2011$wicket_type==""] <- NA
icc_2011$player_dismissed[icc_2011$player_dismissed==""] <- NA
icc_2011$over <- floor(icc_2011$ball)

over_intervals <- cut(icc_2011$over, breaks=seq(0,50,10),
                      include.lowest = TRUE,
                      right = FALSE)
icc_2011$binned_overs <- over_intervals

plot_missing(icc_2011)

```

```{r}

####################### ICC 2015 Final ######################
####### Preprocessing #######
icc_2015 <- read.csv("Data_ICC_2015_F.csv")
icc_2015$match_id <- NULL

icc_2015$wicket_type[icc_2015$wicket_type==""] <- NA
icc_2015$player_dismissed[icc_2015$player_dismissed==""] <- NA
icc_2015$over <- floor(icc_2015$ball)

over_intervals <- cut(icc_2015$over, breaks=seq(0,50,10),
                      include.lowest = TRUE,
                      right = FALSE)
icc_2015$binned_overs <- over_intervals
####### Preprocessing #######


##### Missing Value Plot ####

plot_missing(icc_2015)

```
